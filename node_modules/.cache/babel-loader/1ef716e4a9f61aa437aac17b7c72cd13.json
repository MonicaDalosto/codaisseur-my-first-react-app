{"ast":null,"code":"var _jsxFileName = \"/Users/monicadalosto/MeusProjetos/codaisseur/week2/day3/lifting-state2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport users from './data/users.json';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [search, setSearch] = useState(''); // console.log('search: ', search);\n  // Quando estou usando onChange/onclick, tenho duas opções:\n  // 1 - Declarar a função dentro do input (dentro do html), nesse caso, ela será uma arrow function anônima, ou\n  // 2 - invokar a função handleChange no input e declará-la fora, como abaixo. Quando trabalho com onChange, o padrão de mercado é declarar a função com o nome \"handleChange\".\n  // const handleChange = event => {\n  //   setSearch(event.target.value);\n  // };\n  // {/* <input value={search} onChange={handleChange} /> */}\n  // Obs.: As duas funcionam da mesma forma, mas quando a função tiver somente uma linha (como neste caso), o ideal é declará-la dentro do input.\n  // Obs.2: onChange e onClick tem o mesmo propósito. onChange é usada em <input/> e onclick é usada em <button></button>\n  // Obs.3: onchange and onClick pass by default the \"event\" as an argument, so I don't need to send the argument when I invoke a function, but I can declare and use it when the function runs.\n\n  const [filteredUsers, setFilteredUsers] = useState(users);\n  useEffect(() => {\n    const filtered = users.filter(user => {\n      return user.name === search;\n    });\n    setFilteredUsers();\n  }, [search]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: search,\n      onChange: event => setSearch(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: filteredUsers.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"kVTb/qj2jn4wNQSXJMQccV9cOI0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["users","useEffect","useState","App","search","setSearch","filteredUsers","setFilteredUsers","filtered","filter","user","name","event","target","value","map"],"sources":["/Users/monicadalosto/MeusProjetos/codaisseur/week2/day3/lifting-state2/src/App.js"],"sourcesContent":["import users from './data/users.json';\nimport './App.css';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const [search, setSearch] = useState('');\n  // console.log('search: ', search);\n\n  // Quando estou usando onChange/onclick, tenho duas opções:\n  // 1 - Declarar a função dentro do input (dentro do html), nesse caso, ela será uma arrow function anônima, ou\n  // 2 - invokar a função handleChange no input e declará-la fora, como abaixo. Quando trabalho com onChange, o padrão de mercado é declarar a função com o nome \"handleChange\".\n  // const handleChange = event => {\n  //   setSearch(event.target.value);\n  // };\n  // {/* <input value={search} onChange={handleChange} /> */}\n  // Obs.: As duas funcionam da mesma forma, mas quando a função tiver somente uma linha (como neste caso), o ideal é declará-la dentro do input.\n  // Obs.2: onChange e onClick tem o mesmo propósito. onChange é usada em <input/> e onclick é usada em <button></button>\n  // Obs.3: onchange and onClick pass by default the \"event\" as an argument, so I don't need to send the argument when I invoke a function, but I can declare and use it when the function runs.\n\n  const [filteredUsers, setFilteredUsers] = useState(users);\n\n  useEffect(() => {\n    const filtered = users.filter(user => {\n      return user.name === search;\n    });\n    setFilteredUsers();\n  }, [search]);\n\n  return (\n    <div className=\"App\">\n      <input value={search} onChange={event => setSearch(event.target.value)} />\n      <div>\n        {filteredUsers.map(user => (\n          <div>{user.name}</div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,mBAAlB;AACA,OAAO,WAAP;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,EAAD,CAApC,CADa,CAEb;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAACF,KAAD,CAAlD;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMO,QAAQ,GAAGR,KAAK,CAACS,MAAN,CAAaC,IAAI,IAAI;MACpC,OAAOA,IAAI,CAACC,IAAL,KAAcP,MAArB;IACD,CAFgB,CAAjB;IAGAG,gBAAgB;EACjB,CALQ,EAKN,CAACH,MAAD,CALM,CAAT;EAOA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAO,KAAK,EAAEA,MAAd;MAAsB,QAAQ,EAAEQ,KAAK,IAAIP,SAAS,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd;IAAlD;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,UACGR,aAAa,CAACS,GAAd,CAAkBL,IAAI,iBACrB;QAAA,UAAMA,IAAI,CAACC;MAAX;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAUD;;GAlCQR,G;;KAAAA,G;AAoCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}